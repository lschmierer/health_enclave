// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: HealthEnclave.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///
///  HealthEnclave.proto
///
///
///  Created by Lukas Schmierer on 03.04.20.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct HealthEnclave_DocumentIdentifier {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uuid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct HealthEnclave_DocumentMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: HealthEnclave_DocumentIdentifier {
    get {return _id ?? HealthEnclave_DocumentIdentifier()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var name: String = String()

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var createdBy: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: HealthEnclave_DocumentIdentifier? = nil
  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct HealthEnclave_EncryptedDocumentKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct HealthEnclave_EncryptedDocumentKeyWithId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: HealthEnclave_DocumentIdentifier {
    get {return _id ?? HealthEnclave_DocumentIdentifier()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var key: HealthEnclave_EncryptedDocumentKey {
    get {return _key ?? HealthEnclave_EncryptedDocumentKey()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {self._key = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: HealthEnclave_DocumentIdentifier? = nil
  fileprivate var _key: HealthEnclave_EncryptedDocumentKey? = nil
}

public struct HealthEnclave_TwofoldEncryptedDocumentKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct HealthEnclave_TwofoldEncryptedDocumentKeyWithId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: HealthEnclave_DocumentIdentifier {
    get {return _id ?? HealthEnclave_DocumentIdentifier()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var key: HealthEnclave_TwofoldEncryptedDocumentKey {
    get {return _key ?? HealthEnclave_TwofoldEncryptedDocumentKey()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {self._key = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: HealthEnclave_DocumentIdentifier? = nil
  fileprivate var _key: HealthEnclave_TwofoldEncryptedDocumentKey? = nil
}

public struct HealthEnclave_OneOrTwofoldEncyptedDocumentKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: HealthEnclave_OneOrTwofoldEncyptedDocumentKey.OneOf_Content? = nil

  public var onefoldEncryptedKey: HealthEnclave_EncryptedDocumentKey {
    get {
      if case .onefoldEncryptedKey(let v)? = content {return v}
      return HealthEnclave_EncryptedDocumentKey()
    }
    set {content = .onefoldEncryptedKey(newValue)}
  }

  public var twofoldEncryptedKey: HealthEnclave_TwofoldEncryptedDocumentKey {
    get {
      if case .twofoldEncryptedKey(let v)? = content {return v}
      return HealthEnclave_TwofoldEncryptedDocumentKey()
    }
    set {content = .twofoldEncryptedKey(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Content: Equatable {
    case onefoldEncryptedKey(HealthEnclave_EncryptedDocumentKey)
    case twofoldEncryptedKey(HealthEnclave_TwofoldEncryptedDocumentKey)

  #if !swift(>=4.1)
    public static func ==(lhs: HealthEnclave_OneOrTwofoldEncyptedDocumentKey.OneOf_Content, rhs: HealthEnclave_OneOrTwofoldEncyptedDocumentKey.OneOf_Content) -> Bool {
      switch (lhs, rhs) {
      case (.onefoldEncryptedKey(let l), .onefoldEncryptedKey(let r)): return l == r
      case (.twofoldEncryptedKey(let l), .twofoldEncryptedKey(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct HealthEnclave_TwofoldEncyptedDocumentChunked {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: HealthEnclave_TwofoldEncyptedDocumentChunked.OneOf_Content? = nil

  public var metadata: HealthEnclave_DocumentMetadata {
    get {
      if case .metadata(let v)? = content {return v}
      return HealthEnclave_DocumentMetadata()
    }
    set {content = .metadata(newValue)}
  }

  public var key: HealthEnclave_TwofoldEncryptedDocumentKey {
    get {
      if case .key(let v)? = content {return v}
      return HealthEnclave_TwofoldEncryptedDocumentKey()
    }
    set {content = .key(newValue)}
  }

  public var chunk: Data {
    get {
      if case .chunk(let v)? = content {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {content = .chunk(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Content: Equatable {
    case metadata(HealthEnclave_DocumentMetadata)
    case key(HealthEnclave_TwofoldEncryptedDocumentKey)
    case chunk(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: HealthEnclave_TwofoldEncyptedDocumentChunked.OneOf_Content, rhs: HealthEnclave_TwofoldEncyptedDocumentChunked.OneOf_Content) -> Bool {
      switch (lhs, rhs) {
      case (.metadata(let l), .metadata(let r)): return l == r
      case (.key(let l), .key(let r)): return l == r
      case (.chunk(let l), .chunk(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct HealthEnclave_OneOrTwofoldEncyptedDocumentChunked {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: HealthEnclave_OneOrTwofoldEncyptedDocumentChunked.OneOf_Content? = nil

  public var metadata: HealthEnclave_DocumentMetadata {
    get {
      if case .metadata(let v)? = content {return v}
      return HealthEnclave_DocumentMetadata()
    }
    set {content = .metadata(newValue)}
  }

  public var key: HealthEnclave_OneOrTwofoldEncyptedDocumentKey {
    get {
      if case .key(let v)? = content {return v}
      return HealthEnclave_OneOrTwofoldEncyptedDocumentKey()
    }
    set {content = .key(newValue)}
  }

  public var chunk: Data {
    get {
      if case .chunk(let v)? = content {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {content = .chunk(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Content: Equatable {
    case metadata(HealthEnclave_DocumentMetadata)
    case key(HealthEnclave_OneOrTwofoldEncyptedDocumentKey)
    case chunk(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: HealthEnclave_OneOrTwofoldEncyptedDocumentChunked.OneOf_Content, rhs: HealthEnclave_OneOrTwofoldEncyptedDocumentChunked.OneOf_Content) -> Bool {
      switch (lhs, rhs) {
      case (.metadata(let l), .metadata(let r)): return l == r
      case (.key(let l), .key(let r)): return l == r
      case (.chunk(let l), .chunk(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct HealthEnclave_WifiConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ssid: String = String()

  public var password: String = String()

  public var ipAddress: String = String()

  public var port: Int32 = 0

  public var derCert: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "health_enclave"

extension HealthEnclave_DocumentIdentifier: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DocumentIdentifier"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HealthEnclave_DocumentIdentifier, rhs: HealthEnclave_DocumentIdentifier) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthEnclave_DocumentMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DocumentMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "createdAt"),
    4: .same(proto: "createdBy"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularMessageField(value: &self._createdAt)
      case 4: try decoder.decodeSingularStringField(value: &self.createdBy)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.createdBy.isEmpty {
      try visitor.visitSingularStringField(value: self.createdBy, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HealthEnclave_DocumentMetadata, rhs: HealthEnclave_DocumentMetadata) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.createdBy != rhs.createdBy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthEnclave_EncryptedDocumentKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EncryptedDocumentKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HealthEnclave_EncryptedDocumentKey, rhs: HealthEnclave_EncryptedDocumentKey) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthEnclave_EncryptedDocumentKeyWithId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EncryptedDocumentKeyWithId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._id)
      case 2: try decoder.decodeSingularMessageField(value: &self._key)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HealthEnclave_EncryptedDocumentKeyWithId, rhs: HealthEnclave_EncryptedDocumentKeyWithId) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._key != rhs._key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthEnclave_TwofoldEncryptedDocumentKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TwofoldEncryptedDocumentKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HealthEnclave_TwofoldEncryptedDocumentKey, rhs: HealthEnclave_TwofoldEncryptedDocumentKey) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthEnclave_TwofoldEncryptedDocumentKeyWithId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TwofoldEncryptedDocumentKeyWithId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._id)
      case 2: try decoder.decodeSingularMessageField(value: &self._key)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HealthEnclave_TwofoldEncryptedDocumentKeyWithId, rhs: HealthEnclave_TwofoldEncryptedDocumentKeyWithId) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._key != rhs._key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthEnclave_OneOrTwofoldEncyptedDocumentKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OneOrTwofoldEncyptedDocumentKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "onefoldEncryptedKey"),
    2: .same(proto: "twofoldEncryptedKey"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: HealthEnclave_EncryptedDocumentKey?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .onefoldEncryptedKey(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .onefoldEncryptedKey(v)}
      case 2:
        var v: HealthEnclave_TwofoldEncryptedDocumentKey?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .twofoldEncryptedKey(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .twofoldEncryptedKey(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.content {
    case .onefoldEncryptedKey(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .twofoldEncryptedKey(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HealthEnclave_OneOrTwofoldEncyptedDocumentKey, rhs: HealthEnclave_OneOrTwofoldEncyptedDocumentKey) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthEnclave_TwofoldEncyptedDocumentChunked: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TwofoldEncyptedDocumentChunked"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "key"),
    3: .same(proto: "chunk"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: HealthEnclave_DocumentMetadata?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .metadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .metadata(v)}
      case 2:
        var v: HealthEnclave_TwofoldEncryptedDocumentKey?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .key(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .key(v)}
      case 3:
        if self.content != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.content = .chunk(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.content {
    case .metadata(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .key(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .chunk(let v)?:
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HealthEnclave_TwofoldEncyptedDocumentChunked, rhs: HealthEnclave_TwofoldEncyptedDocumentChunked) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthEnclave_OneOrTwofoldEncyptedDocumentChunked: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OneOrTwofoldEncyptedDocumentChunked"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
    2: .same(proto: "key"),
    3: .same(proto: "chunk"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: HealthEnclave_DocumentMetadata?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .metadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .metadata(v)}
      case 2:
        var v: HealthEnclave_OneOrTwofoldEncyptedDocumentKey?
        if let current = self.content {
          try decoder.handleConflictingOneOf()
          if case .key(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.content = .key(v)}
      case 3:
        if self.content != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.content = .chunk(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.content {
    case .metadata(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .key(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .chunk(let v)?:
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HealthEnclave_OneOrTwofoldEncyptedDocumentChunked, rhs: HealthEnclave_OneOrTwofoldEncyptedDocumentChunked) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthEnclave_WifiConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WifiConfiguration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ssid"),
    2: .same(proto: "password"),
    3: .same(proto: "ipAddress"),
    4: .same(proto: "port"),
    5: .same(proto: "derCert"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ssid)
      case 2: try decoder.decodeSingularStringField(value: &self.password)
      case 3: try decoder.decodeSingularStringField(value: &self.ipAddress)
      case 4: try decoder.decodeSingularInt32Field(value: &self.port)
      case 5: try decoder.decodeSingularBytesField(value: &self.derCert)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ssid.isEmpty {
      try visitor.visitSingularStringField(value: self.ssid, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    if !self.ipAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ipAddress, fieldNumber: 3)
    }
    if self.port != 0 {
      try visitor.visitSingularInt32Field(value: self.port, fieldNumber: 4)
    }
    if !self.derCert.isEmpty {
      try visitor.visitSingularBytesField(value: self.derCert, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HealthEnclave_WifiConfiguration, rhs: HealthEnclave_WifiConfiguration) -> Bool {
    if lhs.ssid != rhs.ssid {return false}
    if lhs.password != rhs.password {return false}
    if lhs.ipAddress != rhs.ipAddress {return false}
    if lhs.port != rhs.port {return false}
    if lhs.derCert != rhs.derCert {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
