//
//  HealthEnclave.proto
//
//
//  Created by Lukas Schmierer on 03.04.20.
//
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

package health_enclave;

// Interface exported by the server.
// The server is the Practitioner Terminal.
// The client is the Patient Device.
service HealthEnclave {
    // Async stream for monitoring connection status.
    //
    // The client should send a message at least every 2 seconds.
    // The server should respond immediateley.
    rpc KeepAlive(stream google.protobuf.Empty) returns (stream google.protobuf.Empty);
    
    // The client streams a list of documents locally present on the device.
    rpc AdvertiseDocumentsToTerminal(stream DocumentMetadata) returns (google.protobuf.Empty);
    
    // The server streams a list of documents that are not present on the device.
    //
    // The list may contain documents that are in fact present on the device, but
    // not advertised to the server, yet.
    rpc MissingDocumentsForDevice(google.protobuf.Empty) returns (stream DocumentIdentifier);
    
    // The server streams a list of documents that are not present on the terminal.
    //
    // The client shall treat received identifiers as LIFO queue.
    // Documents requested last shall be transmitted first.
    // This way, the terminal can prioritize to e.g. instantly show a document when selected by a user.
    rpc MissingDocumentsForTerminal(google.protobuf.Empty) returns (stream DocumentIdentifier);
    
    // The client streams a list of deleted documents.
    //
    // The server shall delete these documents as well.
    rpc DeletedDocumentsForTerminal(stream DocumentIdentifier) returns (google.protobuf.Empty);
    
    // Stream a list of documents the server wants to obtain the corresponding onefold encrypted keys for.
    // Thes keys give immediate access to documents.
    rpc MissingEncryptedDocumentKeysForTerminal(google.protobuf.Empty) returns (stream DocumentIdentifier);
    
    // Stream a list of documents the server wants to obtain the corresponding twofold encrypted keys for.
    // Thes keys do not give access to documents and are meant for backup purpose.
    rpc MissingTwofoldEncryptedDocumentKeysForTerminal(google.protobuf.Empty) returns (stream DocumentIdentifier);
    
    // Transfer the document for the fiven uuid to the client.
    //
    // The key is either onefold (new documents) or twofold (restore backup) encrypted.
    rpc TransferDocumentToDevice(DocumentIdentifier) returns (stream OneOrTwofoldEncyptedDocumentChunked);
    
    // Transfer a document from device to terminal.
    rpc TransferDocumentToTerminal(stream TwofoldEncyptedDocumentChunked) returns (google.protobuf.Empty);
    
    // Transfer a onefold encrypted key to the terminal.
    rpc TransferEncryptedDocumentKeyToTerminal(EncryptedDocumentKeyWithId) returns (google.protobuf.Empty);
    
    // Transfer a onefold encrypted key not to the terminal.
    // (And explicitly do not give access to document.)
    rpc TransferEncryptedDocumentKeyNotToTerminal(DocumentIdentifier) returns (google.protobuf.Empty);
    
    // Transfer a twofold encrypted key to the terminal.
    rpc TransferTwofoldEncryptedDocumentKeyToTerminal(TwofoldEncryptedDocumentKeyWithId) returns (google.protobuf.Empty);
}

message DocumentIdentifier {
    string uuid = 1;
}

message DocumentMetadata {
    DocumentIdentifier id = 1;
    string name = 2;
    google.protobuf.Timestamp createdAt = 3;
    string createdBy = 4;
}

message EncryptedDocumentKey {
    bytes data = 1;
}

message EncryptedDocumentKeyWithId {
    DocumentIdentifier id = 1;
    EncryptedDocumentKey key = 2;
}

message TwofoldEncryptedDocumentKey {
    bytes data = 1;
}

message TwofoldEncryptedDocumentKeyWithId {
    DocumentIdentifier id = 1;
    TwofoldEncryptedDocumentKey key = 2;
}

message OneOrTwofoldEncyptedDocumentKey {
  oneof content {
    EncryptedDocumentKey onefoldEncryptedKey = 1;
    TwofoldEncryptedDocumentKey twofoldEncryptedKey = 2;
  }
}

message TwofoldEncyptedDocumentChunked {
  oneof content {
    DocumentMetadata metadata = 1;
    TwofoldEncryptedDocumentKey key = 2;
    bytes chunk = 3;
  }
}

message OneOrTwofoldEncyptedDocumentChunked {
  oneof content {
    DocumentMetadata metadata = 1;
    OneOrTwofoldEncyptedDocumentKey key = 2;
    bytes chunk = 3;
  }
}

message WifiConfiguration {
    string ssid = 1;
    string password = 2;
    string ipAddress = 3;
    int32 port = 4;
    bytes derCert = 5;
}
