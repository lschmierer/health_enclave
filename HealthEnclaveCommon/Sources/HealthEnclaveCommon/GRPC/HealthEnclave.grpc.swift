//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: HealthEnclave.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate HealthEnclave_HealthEnclaveClient, then call methods of this protocol to make API calls.
public protocol HealthEnclave_HealthEnclaveClientProtocol: GRPCClient {
  func keepAlive(
    callOptions: CallOptions?,
    handler: @escaping (SwiftProtobuf.Google_Protobuf_Empty) -> Void
  ) -> BidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty>

  func advertiseDocumentsToTerminal(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<HealthEnclave_DocumentMetadata, SwiftProtobuf.Google_Protobuf_Empty>

  func missingDocumentsForDevice(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (HealthEnclave_DocumentIdentifier) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, HealthEnclave_DocumentIdentifier>

  func missingDocumentsForTerminal(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (HealthEnclave_DocumentIdentifier) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, HealthEnclave_DocumentIdentifier>

  func deletedDocumentsForTerminal(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<HealthEnclave_DocumentIdentifier, SwiftProtobuf.Google_Protobuf_Empty>

  func missingEncryptedDocumentKeysForTerminal(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (HealthEnclave_DocumentIdentifier) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, HealthEnclave_DocumentIdentifier>

  func missingTwofoldEncryptedDocumentKeysForTerminal(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?,
    handler: @escaping (HealthEnclave_DocumentIdentifier) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, HealthEnclave_DocumentIdentifier>

  func transferDocumentToDevice(
    _ request: HealthEnclave_DocumentIdentifier,
    callOptions: CallOptions?,
    handler: @escaping (HealthEnclave_OneOrTwofoldEncyptedDocumentChunked) -> Void
  ) -> ServerStreamingCall<HealthEnclave_DocumentIdentifier, HealthEnclave_OneOrTwofoldEncyptedDocumentChunked>

  func transferDocumentToTerminal(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<HealthEnclave_TwofoldEncyptedDocumentChunked, SwiftProtobuf.Google_Protobuf_Empty>

  func transferEncryptedDocumentKeyToTerminal(
    _ request: HealthEnclave_EncryptedDocumentKeyWithId,
    callOptions: CallOptions?
  ) -> UnaryCall<HealthEnclave_EncryptedDocumentKeyWithId, SwiftProtobuf.Google_Protobuf_Empty>

  func transferEncryptedDocumentKeyNotToTerminal(
    _ request: HealthEnclave_DocumentIdentifier,
    callOptions: CallOptions?
  ) -> UnaryCall<HealthEnclave_DocumentIdentifier, SwiftProtobuf.Google_Protobuf_Empty>

  func transferTwofoldEncryptedDocumentKeyToTerminal(
    _ request: HealthEnclave_TwofoldEncryptedDocumentKeyWithId,
    callOptions: CallOptions?
  ) -> UnaryCall<HealthEnclave_TwofoldEncryptedDocumentKeyWithId, SwiftProtobuf.Google_Protobuf_Empty>

}

extension HealthEnclave_HealthEnclaveClientProtocol {

  /// Async stream for monitoring connection status.
  ///
  /// The client should send a message at least every 2 seconds.
  /// The server should respond immediateley.
  /// The client disconnect, if the server does not responf within 2 seconds.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func keepAlive(
    callOptions: CallOptions? = nil,
    handler: @escaping (SwiftProtobuf.Google_Protobuf_Empty) -> Void
  ) -> BidirectionalStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeBidirectionalStreamingCall(
      path: "/health_enclave.HealthEnclave/KeepAlive",
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// The client streams a list of documents locally present on the device.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func advertiseDocumentsToTerminal(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<HealthEnclave_DocumentMetadata, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeClientStreamingCall(
      path: "/health_enclave.HealthEnclave/AdvertiseDocumentsToTerminal",
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// The server streams a list of documents that are not present on the device.
  ///
  /// The list may contain documents that are in fact present on the device, but
  /// not advertised to the server, yet.
  ///
  /// - Parameters:
  ///   - request: Request to send to MissingDocumentsForDevice.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func missingDocumentsForDevice(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (HealthEnclave_DocumentIdentifier) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, HealthEnclave_DocumentIdentifier> {
    return self.makeServerStreamingCall(
      path: "/health_enclave.HealthEnclave/MissingDocumentsForDevice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// The server streams a list of documents that are not present on the terminal.
  ///
  /// The client shall treat received identifiers as LIFO queue.
  /// Documents requested last shall be transmitted first.
  /// This way, the terminal can prioritize to e.g. instantly show a document when
  /// selected by a user.
  ///
  /// - Parameters:
  ///   - request: Request to send to MissingDocumentsForTerminal.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func missingDocumentsForTerminal(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (HealthEnclave_DocumentIdentifier) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, HealthEnclave_DocumentIdentifier> {
    return self.makeServerStreamingCall(
      path: "/health_enclave.HealthEnclave/MissingDocumentsForTerminal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// The client streams a list of deleted documents.
  ///
  /// The server shall delete these documents as well.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func deletedDocumentsForTerminal(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<HealthEnclave_DocumentIdentifier, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeClientStreamingCall(
      path: "/health_enclave.HealthEnclave/DeletedDocumentsForTerminal",
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// The server streams a list of documents it wants the (onefold) encrypted key for.
  ///
  /// These keys give immediate access to documents.
  ///
  /// - Parameters:
  ///   - request: Request to send to MissingEncryptedDocumentKeysForTerminal.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func missingEncryptedDocumentKeysForTerminal(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (HealthEnclave_DocumentIdentifier) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, HealthEnclave_DocumentIdentifier> {
    return self.makeServerStreamingCall(
      path: "/health_enclave.HealthEnclave/MissingEncryptedDocumentKeysForTerminal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// The server streams a list of documents it wants the twofold encrypted key for.
  ///
  /// These keys do not give access to documents and are meant for backup purpose.
  ///
  /// - Parameters:
  ///   - request: Request to send to MissingTwofoldEncryptedDocumentKeysForTerminal.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func missingTwofoldEncryptedDocumentKeysForTerminal(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (HealthEnclave_DocumentIdentifier) -> Void
  ) -> ServerStreamingCall<SwiftProtobuf.Google_Protobuf_Empty, HealthEnclave_DocumentIdentifier> {
    return self.makeServerStreamingCall(
      path: "/health_enclave.HealthEnclave/MissingTwofoldEncryptedDocumentKeysForTerminal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Transfer the document with the given identifier to the client.
  ///
  /// The key is either onefold (new documents) or twofold (restored backup) encrypted.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferDocumentToDevice.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func transferDocumentToDevice(
    _ request: HealthEnclave_DocumentIdentifier,
    callOptions: CallOptions? = nil,
    handler: @escaping (HealthEnclave_OneOrTwofoldEncyptedDocumentChunked) -> Void
  ) -> ServerStreamingCall<HealthEnclave_DocumentIdentifier, HealthEnclave_OneOrTwofoldEncyptedDocumentChunked> {
    return self.makeServerStreamingCall(
      path: "/health_enclave.HealthEnclave/TransferDocumentToDevice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Transfer a document from device to terminal.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func transferDocumentToTerminal(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<HealthEnclave_TwofoldEncyptedDocumentChunked, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeClientStreamingCall(
      path: "/health_enclave.HealthEnclave/TransferDocumentToTerminal",
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Transfer a onefold encrypted key to the terminal.
  ///
  /// This keys gives immediate access to the corresponding document.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferEncryptedDocumentKeyToTerminal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func transferEncryptedDocumentKeyToTerminal(
    _ request: HealthEnclave_EncryptedDocumentKeyWithId,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<HealthEnclave_EncryptedDocumentKeyWithId, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/health_enclave.HealthEnclave/TransferEncryptedDocumentKeyToTerminal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Transfer a onefold encrypted key not to the terminal.
  ///
  /// This tells the terminal that the user denied the access request.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferEncryptedDocumentKeyNotToTerminal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func transferEncryptedDocumentKeyNotToTerminal(
    _ request: HealthEnclave_DocumentIdentifier,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<HealthEnclave_DocumentIdentifier, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/health_enclave.HealthEnclave/TransferEncryptedDocumentKeyNotToTerminal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Transfer a twofold encrypted key to the terminal.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferTwofoldEncryptedDocumentKeyToTerminal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func transferTwofoldEncryptedDocumentKeyToTerminal(
    _ request: HealthEnclave_TwofoldEncryptedDocumentKeyWithId,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<HealthEnclave_TwofoldEncryptedDocumentKeyWithId, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/health_enclave.HealthEnclave/TransferTwofoldEncryptedDocumentKeyToTerminal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class HealthEnclave_HealthEnclaveClient: HealthEnclave_HealthEnclaveClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the health_enclave.HealthEnclave service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol HealthEnclave_HealthEnclaveProvider: CallHandlerProvider {
  /// Async stream for monitoring connection status.
  ///
  /// The client should send a message at least every 2 seconds.
  /// The server should respond immediateley.
  /// The client disconnect, if the server does not responf within 2 seconds.
  func keepAlive(context: StreamingResponseCallContext<SwiftProtobuf.Google_Protobuf_Empty>) -> EventLoopFuture<(StreamEvent<SwiftProtobuf.Google_Protobuf_Empty>) -> Void>
  /// The client streams a list of documents locally present on the device.
  func advertiseDocumentsToTerminal(context: UnaryResponseCallContext<SwiftProtobuf.Google_Protobuf_Empty>) -> EventLoopFuture<(StreamEvent<HealthEnclave_DocumentMetadata>) -> Void>
  /// The server streams a list of documents that are not present on the device.
  ///
  /// The list may contain documents that are in fact present on the device, but
  /// not advertised to the server, yet.
  func missingDocumentsForDevice(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<HealthEnclave_DocumentIdentifier>) -> EventLoopFuture<GRPCStatus>
  /// The server streams a list of documents that are not present on the terminal.
  ///
  /// The client shall treat received identifiers as LIFO queue.
  /// Documents requested last shall be transmitted first.
  /// This way, the terminal can prioritize to e.g. instantly show a document when
  /// selected by a user.
  func missingDocumentsForTerminal(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<HealthEnclave_DocumentIdentifier>) -> EventLoopFuture<GRPCStatus>
  /// The client streams a list of deleted documents.
  ///
  /// The server shall delete these documents as well.
  func deletedDocumentsForTerminal(context: UnaryResponseCallContext<SwiftProtobuf.Google_Protobuf_Empty>) -> EventLoopFuture<(StreamEvent<HealthEnclave_DocumentIdentifier>) -> Void>
  /// The server streams a list of documents it wants the (onefold) encrypted key for.
  ///
  /// These keys give immediate access to documents.
  func missingEncryptedDocumentKeysForTerminal(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<HealthEnclave_DocumentIdentifier>) -> EventLoopFuture<GRPCStatus>
  /// The server streams a list of documents it wants the twofold encrypted key for.
  ///
  /// These keys do not give access to documents and are meant for backup purpose.
  func missingTwofoldEncryptedDocumentKeysForTerminal(request: SwiftProtobuf.Google_Protobuf_Empty, context: StreamingResponseCallContext<HealthEnclave_DocumentIdentifier>) -> EventLoopFuture<GRPCStatus>
  /// Transfer the document with the given identifier to the client.
  ///
  /// The key is either onefold (new documents) or twofold (restored backup) encrypted.
  func transferDocumentToDevice(request: HealthEnclave_DocumentIdentifier, context: StreamingResponseCallContext<HealthEnclave_OneOrTwofoldEncyptedDocumentChunked>) -> EventLoopFuture<GRPCStatus>
  /// Transfer a document from device to terminal.
  func transferDocumentToTerminal(context: UnaryResponseCallContext<SwiftProtobuf.Google_Protobuf_Empty>) -> EventLoopFuture<(StreamEvent<HealthEnclave_TwofoldEncyptedDocumentChunked>) -> Void>
  /// Transfer a onefold encrypted key to the terminal.
  ///
  /// This keys gives immediate access to the corresponding document.
  func transferEncryptedDocumentKeyToTerminal(request: HealthEnclave_EncryptedDocumentKeyWithId, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Transfer a onefold encrypted key not to the terminal.
  ///
  /// This tells the terminal that the user denied the access request.
  func transferEncryptedDocumentKeyNotToTerminal(request: HealthEnclave_DocumentIdentifier, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  /// Transfer a twofold encrypted key to the terminal.
  func transferTwofoldEncryptedDocumentKeyToTerminal(request: HealthEnclave_TwofoldEncryptedDocumentKeyWithId, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension HealthEnclave_HealthEnclaveProvider {
  public var serviceName: Substring { return "health_enclave.HealthEnclave" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "KeepAlive":
      return CallHandlerFactory.makeBidirectionalStreaming(callHandlerContext: callHandlerContext) { context in
        return self.keepAlive(context: context)
      }

    case "AdvertiseDocumentsToTerminal":
      return CallHandlerFactory.makeClientStreaming(callHandlerContext: callHandlerContext) { context in
        return self.advertiseDocumentsToTerminal(context: context)
      }

    case "MissingDocumentsForDevice":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.missingDocumentsForDevice(request: request, context: context)
        }
      }

    case "MissingDocumentsForTerminal":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.missingDocumentsForTerminal(request: request, context: context)
        }
      }

    case "DeletedDocumentsForTerminal":
      return CallHandlerFactory.makeClientStreaming(callHandlerContext: callHandlerContext) { context in
        return self.deletedDocumentsForTerminal(context: context)
      }

    case "MissingEncryptedDocumentKeysForTerminal":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.missingEncryptedDocumentKeysForTerminal(request: request, context: context)
        }
      }

    case "MissingTwofoldEncryptedDocumentKeysForTerminal":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.missingTwofoldEncryptedDocumentKeysForTerminal(request: request, context: context)
        }
      }

    case "TransferDocumentToDevice":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.transferDocumentToDevice(request: request, context: context)
        }
      }

    case "TransferDocumentToTerminal":
      return CallHandlerFactory.makeClientStreaming(callHandlerContext: callHandlerContext) { context in
        return self.transferDocumentToTerminal(context: context)
      }

    case "TransferEncryptedDocumentKeyToTerminal":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.transferEncryptedDocumentKeyToTerminal(request: request, context: context)
        }
      }

    case "TransferEncryptedDocumentKeyNotToTerminal":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.transferEncryptedDocumentKeyNotToTerminal(request: request, context: context)
        }
      }

    case "TransferTwofoldEncryptedDocumentKeyToTerminal":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.transferTwofoldEncryptedDocumentKeyToTerminal(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

